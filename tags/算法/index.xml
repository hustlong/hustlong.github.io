<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on 龙大侠</title>
    <link>/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on 龙大侠</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 29 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>经典排序算法总结与Go实现</title>
      <link>/blog/2017-06-29-%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ego%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Thu, 29 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>/blog/2017-06-29-%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93%E4%B8%8Ego%E5%AE%9E%E7%8E%B0/</guid>
      <description>学习Go语言第二周，本周任务尝试实现七大经典排序算法以及分析算法复杂度、优劣及应用场景等，七大经典算法分别为冒泡排序，插入排序，选择排序，希尔排序，归并排序，快速排序，堆排序。 冒泡排序  思路  正如“冒泡”二字，我的理解是重复依次比较相邻的两个数，大的数放在后面，小的数放在前面，一直重复到没有任何一对数字需要交换位置为止。就像冒泡一样，大的数不断浮上来。
 伪代码  do swapped = false for i = 1 to indexOfLastUnsortedElement-1 if leftElement &amp;gt; rightElement swap(leftElement, rightElement) swapped = true; swapCounter++ while swapped   Go实现  func Bubble_Sort(arr []int) { swapped := true len := len(arr) for swapped { swapped = false for i := 0; i &amp;lt; len-1; i++ { if arr[i] &amp;gt; arr[i+1] { arr[i], arr[i+1] = arr[i+1], arr[i] swapped = true } } } }  选择排序  思路  先假设第一个元素为最小值，然后与剩余的 len-1 个元素依次进行比较，标记最小数的位置，如果有更小的数，则在进行下一轮遍历比较之前交换位置。</description>
    </item>
    
  </channel>
</rss>